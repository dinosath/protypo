{# generate controllers #}
{% import "_macros.jinja" as macros %}

{% if 'features' in values and 'rest' in values.features  -%}
{% for entity_name,entity in entities | items -%}
{% if entity.properties %}

{% set file_name = entity.title | snake_case -%}
{% set table_name = macros.get_table_name(entity) -%}
{% set module_name = file_name | pascal_case -%}
---
to: {{ values.outputFolder }}/src/controllers/{{ file_name }}.rs
message: "Controller `{{module_name}}` was added successfully."
injections:
- into: {{ values.outputFolder }}/src/controllers/mod.rs
  append: true
  content: "pub mod {{ file_name }};"
---
use std::collections::HashSet;
use anyhow::{anyhow, Error, Context};
use spring_web::{get, post, put, delete,axum::response::{IntoResponse, Json},error::Result,extractor::{Component, Path, Query},};
use spring_sea_orm::{pagination::Pagination,DbConn, };
use serde::{Deserialize, Serialize};
use sea_orm::{ActiveModelTrait, ModelTrait, EntityTrait, Set, IntoActiveModel, Statement, FromQueryResult, ConnectionTrait};
{{ macros.seaorm_prelude_imports(entity) | trim }}
use crate::models::{{ file_name }}::{ActiveModel, Entity, Model};
use super::utils::{ListParams};

{% if macros.has_one_to_many_relation(entity) or macros.has_many_to_many_relation(entity) -%}
#[derive(Clone, Debug, Serialize, Deserialize, FromQueryResult)]
pub struct ResponseModel {
    pub id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    {% for name, property in entity.properties | items -%}
    {%- if property.writeOnly -%}{% continue -%}{%- endif -%}
    pub {{ name | snake_case }}: {{ macros.get_type(name, property, name in entity.required) }} {{ ',' if not loop.last }}
    {% endfor %}
}
{% endif -%}

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Params {
    {% for name, property in entity.properties | items -%}
    {%- if property.readOnly-%}{% continue -%}{%- endif -%}
    pub {{ name | snake_case }}: {{ macros.get_type(name, property, name in entity.required) }} {{ ',' if not loop.last }}
    {% endfor %}
}

impl Params {
    fn update(&self, item: &mut ActiveModel) {
      {% for name, property in entity.properties | items -%}
        {%- if property.readOnly or macros.relation_is_many_to_many(property)=='true' -%}{% continue -%}
        {%- else -%}
      item.{{ name | snake_case }} = Set(self.{{ name | snake_case }}.clone());
        {% endif -%}
      {%- endfor -%}
    }
}

{% set m2m_relationships = entity.properties | items | selectattr('1.x-relationship', 'equalto', 'many-to-many') | map(attribute='0') -%}

async fn load_item<C>(db: &C, id: i32) -> Result<Model>
where
    C: ConnectionTrait,
{
    let item = Entity::find_by_id(id).one(db).await?;
    item.ok_or_else(|| Error::NotFound)
}

#[get("/api/{{ entity.title | plural | kebab_case  }}")]
pub async fn list(Component(db): Component<DbConn>, Query(params): Query<ListParams>, pagination: Pagination,) -> Result<impl IntoResponse> {
    let ids = params.ids.unwrap_or_default();

    let mut query = {% if m2m_relationships | length > 0 -%}Entity::select_with_relations();{% else -%}Entity::find();{% endif %}
    if !ids.is_empty() {
        query = query.filter(Column::Id.is_in(ids));
    }

    let result = query.all(&db).await?;
    Ok(Json(result))
}


#[post("/api/{{ entity.title | plural | kebab_case  }}")]
pub async fn insert(Component(db): Component<DbConn>, Json(params): Json<Params>) -> Result<impl IntoResponse> {
    let mut active_model = ActiveModel {
        ..Default::default()
    };
    params.update(&mut active_model);
    let item = active_model.insert(&db).await.context("failed to insert item")?;
    {% if m2m_relationships | length > 0 -%}
    Entity::insert_m2m().db(&db).id(item.id)
        {% for name in m2m_relationships -%}
        .{{name}}(params.{{name}})
        {%- endfor %}
        .call().await?;
    {% endif -%}

    Ok(Json(item))
}

#[put("/api/{{ entity.title | plural | kebab_case  }}/:id")]
pub async fn update(Component(db): Component<DbConn>, Path(id): Path<i32>, Json(params): Json<Params> ) -> Result<impl IntoResponse> {
    let model = load_item(&db, id).await?;
    let mut model = model.into_active_model();
    params.update(&mut model);
    let model = model.update(&db).await.context("failed to update model")?;
    {% if m2m_relationships | length > 0 -%}
    Entity::insert_m2m()
        .db(&db)
        .id(model.id)
        {% for name in m2m_relationships -%}
        .{{name}}(params.{{name}})
        {%- endfor %}
        .call().await?;
    {% endif -%}

    Ok(Json(model))
}

#[delete("/api/{{ entity.title | plural | kebab_case  }}/:id")]
pub async fn remove(Component(db): Component<DbConn>, Path(id): Path<i32>) -> Result<impl IntoResponse> {
    let model = load_item(&db, id).await?;
    model.delete(&db).await.context("failed to delete model")?;
    Ok(Json(()))
}

#[get("/api/{{ entity.title | plural | kebab_case  }}/:id")]
pub async fn fetch(Component(db): Component<DbConn>, Path(id): Path<i32>,) -> Result<impl IntoResponse> {
    let mut model = load_item(&db, id).await?;
    {% for name, property in entity.properties | items -%}
        {%- if property.readOnly-%}{% continue -%}{%- endif -%}
        {%- if macros.relation_is_many_to_many(property)=='true' -%}
        {%- set relation = macros.get_relation(property) -%}
        {% set m2m_relation_model = macros.get_m2m_relation_model(entity.title,property) | snake_case -%}
    model.{{ name }} = {{'Some(' if not name in entity.required }}model.find_related(crate::models::{{ relation | snake_case }}::Entity).all(&db).await.context("fetch relation {{ relation | snake_case }}")?.iter().map(|item| item.id).collect::<Vec<i32>>(){{ ')' if not name in entity.required }};
        {% endif -%}
    {% endfor -%}
    Ok(Json(model))
}
---
{% endif -%}
{% endfor -%}
{% endif -%}