{# generate entities #}
{% import "_macros.jinja" as macros %}

{% for entity_name,entity in entities | items -%}
{% if entity.properties | items %}

{% set file_name = entity.title | snake_case -%}
{% set module_name = file_name | pascal_case -%}
to: {{ values.outputFolder }}/src/models/{{ file_name }}.rs
message: "Entity `{{module_name}}` was added successfully."
===
use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};
{{ macros.enum_imports(entity) }}
{{ macros.seaorm_prelude_imports(entity=entity)|trim }}

{% for name,property in entity.properties | items -%}
    {% if enum in property -%}
#[derive(PartialEq, Clone, Debug, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)", enum_name = "{{ name | snake_case }}")]
enum {{ name | pascal_case }}{
        {% for enum in property.enum -%}
        #[sea_orm(string_value = "{{ enum | snake_case }}")]
        {{ enum }}{%- if not loop.last -%},{% endif -%}
        {% endfor %}
}
    {% endif -%}
{% endfor -%}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(schema_name="public", table_name = "{{ entity.title | snake_case }}")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    {%- for name, property in entity.properties | items -%}
    {% if macros.relation_is_many_to_many(property=property) or macros.relation_is_one_to_many(property=property) -%}{% continue -%}{% endif -%}
    {{ macros.validations(name=name,property=property) }}
    pub {{ name | snake_case }}{% if macros.relation_is_many_to_one(property=property) and macros.get_relation(property=property) | snake_case == name | snake_case -%}_id{% endif -%}: {{ macros.get_type_with_option(name=name, property=property, required_fields=entity.required) }}{%- if not loop.last -%},{% endif -%}
    {% endfor %}
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
{% for name,property in entity.properties | items -%}
    {% if macros.relation_is_one_to_many(property=property) -%}
        {% set relation = macros.get_relation(property=property) | snake_case -%}
    #[sea_orm(has_many = "crate::models::{{ relation }}::Entity")]
    {{ name | pascal_case }},

    {%- elif macros.relation_is_many_to_one(property=property) -%}
        {% set relation = macros.get_relation(property=property) | snake_case -%}
    #[sea_orm(belongs_to = "crate::models::{{ relation }}::Entity",
    from = "Column::{{ name | pascal_case }}{% if relation==name | snake_case -%}Id{% endif -%}",
    to = "crate::models::{{ relation }}::Column::Id")]
    {{ name | pascal_case }},

    
    {% elif macros.relation_is_many_to_many(property=property)-%}
    {% set relation = macros.get_m2m_relation(left=entity.title, property=property) | snake_case-%}
    #[sea_orm(has_many = "crate::models::{{ relation }}::Entity")]
    {{ relation | pascal_case }},
    {% endif -%}
{% endfor %}
}

{% set implemented_relations = [] -%}
{% for name,property in entity.properties | items -%}
    {%- set relation = macros.get_relation(property=property) | snake_case -%}
    {%- if macros.is_relation(property=property) and relation not in implemented_relations-%}
        {%- set implemented_relations = implemented_relations + [relation]  -%}
        {%- if macros.relation_is_many_to_many(property=property)-%}
impl Related<crate::models::{{ relation }}::Entity> for Entity {
    {% set relation = macros.get_m2m_relation(left=entity.title, property=property) -%}
    fn to() -> RelationDef {
        crate::models::{{ relation | snake_case }}::Relation::{{ relation | split("_") | first | pascal_case}}.def()
    }

    fn via() -> Option<RelationDef> {
        Some(crate::models::{{ relation | snake_case }}::Relation::{{ relation | split("_") | last | pascal_case }}.def().rev())
    }
}

impl Related<super::{{ relation | snake_case }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ relation | pascal_case }}.def()
    }
}

        {% else -%}

impl Related<crate::models::{{ relation }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ name | pascal_case }}.def()
    }
}
        {%- endif -%}
    {%- endif -%}
{%- endfor %}

{% if features and 'graphql' in features -%}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    {% set relations = get_all_relations(entity=entity) | trim -%}
    {% if relations !="" -%}
    {% for relation in relations | split(",") -%}
    #[sea_orm(entity = "crate::models::{{ relation | snake_case }}::Entity")]
    {{ relation | pascal_case }}{%- if not loop.last -%},{% endif -%}
    {% endfor -%}
    {% endif -%}
}
{% endif -%}

impl ActiveModelBehavior for ActiveModel {
}
---
{% endif %}
{% endfor -%}