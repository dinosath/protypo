{% if 'inject_in_user' in values and values['inject_in_user']== true  -%}
message: "Controller `{{module_name}}` was added successfully."
injections:
- into: {{ values.outputFolder }}/src/models/user.rs
  append: true
  content: |
      use chrono::Local;
      use loco_rs::{auth::jwt, hash, prelude::{model, ModelError, ModelResult}};
      use sea_orm::{TransactionTrait};
      use sea_orm::ActiveValue::Set;

      impl Model {
          /// finds a user by the provided id
          ///
          /// # Errors
          ///
          /// When could not find user by the given token or DB query error
          pub async fn find_by_id(db: &DatabaseConnection, id: &str) -> ModelResult<Self> {
              let user = Entity::find()
                  .filter(
                      model::query::condition()
                          .eq(Column::Id, id)
                          .build(),
                  )
                  .one(db)
                  .await?;
              user.ok_or_else(|| ModelError::EntityNotFound)
          }

          /// finds a user by the provided email
          ///
          /// # Errors
          ///
          /// When could not find user by the given token or DB query error
          pub async fn find_by_email(db: &DatabaseConnection, email: &str) -> ModelResult<Self> {
              let user = Entity::find()
                  .filter(
                      model::query::condition()
                          .eq(Column::Email, email)
                          .build(),
                  )
                  .one(db)
                  .await?;
              user.ok_or_else(|| ModelError::EntityNotFound)
          }

          /// finds a user by the provided verification token
          ///
          /// # Errors
          ///
          /// When could not find user by the given token or DB query error
          pub async fn find_by_verification_token(db: &DatabaseConnection, token: &str, ) -> ModelResult<Self> {
              let user = Entity::find()
                  .filter(
                      model::query::condition()
                          .eq(Column::EmailVerificationToken, token)
                          .build(),
                  )
                  .one(db)
                  .await?;
              user.ok_or_else(|| ModelError::EntityNotFound)
          }

          /// finds a user by the provided reset token
          ///
          /// # Errors
          ///
          /// When could not find user by the given token or DB query error
          pub async fn find_by_reset_token(db: &DatabaseConnection, token: &str) -> ModelResult<Self> {
              let user = Entity::find()
                  .filter(
                      model::query::condition()
                          .eq(Column::ResetToken, token)
                          .build(),
                  )
                  .one(db)
                  .await?;
              user.ok_or_else(|| ModelError::EntityNotFound)
          }


          /// Verifies whether the provided plain password matches the hashed password
          ///
          /// # Errors
          ///
          /// when could not verify password
          #[must_use]
          pub fn verify_password(&self, password: &str) -> bool {
              hash::verify_password(password, &self.password)
          }

          /// Asynchronously creates a user with a password and saves it to the
          /// database.
          ///
          /// # Errors
          ///
          /// When could not save the user into the DB
          pub async fn create_with_password(db: &DatabaseConnection, email: &String, password: &String) -> ModelResult<Self> {
              let txn = db.begin().await?;

              if Entity::find()
                  .filter(
                      model::query::condition()
                          .eq(Column::Email, email)
                          .build(),
                  )
                  .one(&txn)
                  .await?
                  .is_some()
              {
                  return Err(ModelError::EntityAlreadyExists {});
              }

              let password_hash = hash::hash_password(password).map_err(|e| ModelError::Any(e.into()))?;
              let user = ActiveModel {
                  email: Set(email.to_string()),
                  password: Set(password_hash),
                  ..Default::default()
              }
                  .insert(&txn)
                  .await?;

              txn.commit().await?;

              Ok(user)
          }

          /// Creates a JWT
          ///
          /// # Errors
          ///
          /// when could not convert user claims to jwt token
          pub fn generate_jwt(&self, secret: &str, expiration: &u64) -> ModelResult<String> {
              Ok(jwt::JWT::new(secret).generate_token(expiration, self.id.to_string(), None)?)
          }
      }

      impl ActiveModel {
          /// Sets the email verification information for the user and
          /// updates it in the database.
          ///
          /// This method is used to record the timestamp when the email verification
          /// was sent and generate a unique verification token for the user.
          ///
          /// # Errors
          ///
          /// when has DB query error
          pub async fn set_email_verification_sent(
              mut self,
              db: &DatabaseConnection,
          ) -> ModelResult<Model> {
              self.email_verification_sent_at = Set(Some(Local::now().into()));
              self.email_verification_token = Set(Some(Uuid::new_v4().to_string()));
              Ok(self.update(db).await?)
          }

          /// Sets the information for a reset password request,
          /// generates a unique reset password token, and updates it in the
          /// database.
          ///
          /// This method records the timestamp when the reset password token is sent
          /// and generates a unique token for the user.
          ///
          /// # Arguments
          ///
          /// # Errors
          ///
          /// when has DB query error
          pub async fn set_forgot_password_sent(mut self, db: &DatabaseConnection) -> ModelResult<Model> {
              self.reset_sent_at = Set(Some(Local::now().into()));
              self.reset_token = Set(Some(Uuid::new_v4().to_string()));
              Ok(self.update(db).await?)
          }

          /// Records the verification time when a user verifies their
          /// email and updates it in the database.
          ///
          /// This method sets the timestamp when the user successfully verifies their
          /// email.
          ///
          /// # Errors
          ///
          /// when has DB query error
          pub async fn verified(mut self, db: &DatabaseConnection) -> ModelResult<Model> {
              self.email_verified_at = Set(Some(Local::now().into()));
              Ok(self.update(db).await?)
          }

          /// Resets the current user password with a new password and
          /// updates it in the database.
          ///
          /// This method hashes the provided password and sets it as the new password
          /// for the user.
          ///
          /// # Errors
          ///
          /// when has DB query error or could not hashed the given password
          pub async fn reset_password(
              mut self,
              db: &DatabaseConnection,
              password: &str,
          ) -> ModelResult<Model> {
              self.password =
                  Set(hash::hash_password(password).map_err(|e| ModelError::Any(e.into()))?);
              self.reset_token = Set(None);
              self.reset_sent_at = Set(None);
              Ok(self.update(db).await?)
          }
      }
---
// Inject to user
{% endif -%}